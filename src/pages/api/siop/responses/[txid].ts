import type { NextApiRequest, NextApiResponse } from "next";
import AuthenticationFlowDocument from "@/models/authenticationFlow";
import { extractClaimsFromVpToken } from "@/helpers/verifiableCredentials";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    res.status(405).end(`Method ${req.method} Not Allowed`);
    return;
  }

  const { txid } = req.query;

  console.error(
    `[OIDC Operational] POST /api/siop/responses/${txid} - Initiated`
  );

  try {
    const data: { vp_token: string } = req.body;

    console.log(
      `[OIDC Operational] POST /api/openid-vc/responses/${txid} - Data: ${JSON.stringify(
        data,
        null,
        4
      )}`
    );

    if (!data.vp_token) {
      res.statusCode = 400;
      res.statusMessage = "bad_request";

      res.status(400).json({ success: false, error: "invalid_vp_token" });

      return;
    }

    const authFlow = await AuthenticationFlowDocument.findOneAndUpdate(
      {
        type: "siop",
        code: txid,
      },
      {
        status: "in-process",
      }
    ).exec();

    console.log(
      `[OIDC Operational] POST /api/siop/responses/${txid} - TRX Found`
    );

    const claims = extractClaimsFromVpToken(data.vp_token);

    await AuthenticationFlowDocument.create({
      type: "oidc",
      code: authFlow.code,
      state: authFlow.state,
      nonce: authFlow.nonce,
      redirectUri: authFlow.redirectUri,
      status: "initiated",
      data: claims,
    });

    await AuthenticationFlowDocument.updateOne(
      {
        type: "siop",
        code: txid,
      },
      {
        status: "complete",
      }
    ).exec();

    console.error(
      `[OIDC Operational] POST /api/siop/responses/${txid} - Complete`
    );

    res.status(204).end();
  } catch (error) {
    console.error(
      `[OIDC Operational] POST /api/siop/responses/${txid} - Error: ${JSON.stringify(
        error,
        null,
        4
      )}`
    );

    res.statusCode = 500;
    res.statusMessage = "internal_server_error";

    res.status(500).json({ error });
  }
}

/*
Request
  Body
  {
    "expires_in": "300",
    "state": "a67a57bb-8e2d-4f8b-8152-ee0fd4061931",
    "presentation_submission": {
      "id": "OMSBNzXn56Q43Yb1cTcds",
      "definition_id": "authn-with-vc",
      "descriptor_map": [
        {
          "id": "basic-information",
          "format": "jwt_vp",
          "path": "$",
          "path_nested": {
            "id": "basic-information",
            "format": "jwt_vc",
            "path": "$.vp.verifiableCredential[0]"
          }
        }
      ]
    },
    "vp_token": "eyJraWQiOiJkaWQ6andrOmV5SmhiR2NpT2lKRlV6STFOaUlzSW5WelpTSTZJbk5wWnlJc0ltdDBlU0k2SWtWRElpd2lZM0oySWpvaVVDMHlOVFlpTENKNElqb2lOMVpmWm5kUE1HZGhTVlJZYTBaNlpHaE5ibU4yYkZwU1J6RTNXRUpMYzBZd2NqQkdja2c0TURSV2F5SXNJbmtpT2lJMFQwbDFMVmh4ZEVObk1ESnpXVWhFWm01cWVFaEpNWEoyYVUxbWVVMWlVR3RQVnpFNGFVNUZSM1ZOSW4wIzAiLCJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9..EIGla7ioLelM4irhD3_8W7jbkZ51-LfXPDJL6bXo3QIAQhVLqPT7Mj5Cc7U4_ppYwWVYhYgB6R_SXF8QEoBX6w"
  }
*/
